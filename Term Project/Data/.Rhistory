#Test1
num_1 <- 1
num_2 <- 7
product_out
product_out <- num_1 * num_2
num_1 <- 1
num_2 <- 7
product_out
num_1 <- 9
num_2 <- 15
product_out
print(product_out)
num_in <- 5
print(message_5_or_6)
for (i in 1:10) {print i^2}
for (i in 1:10) {print(i^2)}
for (day_prefix in c("Mon", "Tues", "Wednes", "Thurs", "Fri")){
print(sprintf("%day", day_prefix))
}
for (day_prefix in c("Mon", "Tues", "Wednes", "Thurs", "Fri")){
print(sprintf("%sday", day_prefix))
}
for (i in 1:num_5_limit) {print(i*5)}
num_5_limit <- 23
# Code goes here:
for (i in 1:num_5_limit) {print(i*5)}
for (i in 1:(num_5_limit/5)) {print(i*5)}
num_5_limit <- 76
for (i in 1:(num_5_limit/5)) {print(i*5)}
# Test2
num_5_limit <- 4
for (i in 1:(num_5_limit/5)) {print(i*5)}
num_5_limit <- 4
for (i in 0:(num_5_limit/5)) {print(i*5)}
product_out <- function(num_1,num_2) {return(num_1 * num_2)}
product_out
product_out(9,15)
print(product_out)
# Test1
num_1 <- 1
num_2 <- 7
num_1 <- 3
num_2 <- 6
# Code goes here:
product_out <- num_1 * num_2
print(product_out)
product_out <- function(num_1,num_2) {return(num_1 * num_2)}
product_out(3,6)
num_1 <- 1
num_2 <- 7
product_out <- num_1 * num_2
print(product_out)
product_out <- function(num_1,num_2) {return(num_1 * num_2)}
product_out(1,7)
num_in <- 7
# Code goes here:
message_5_or_6 <- if (num_in == 5) {
print("You entered 5.")
} else if (num_in == 6) {
print("You entered 6.")
} else {
print("You did not enter 5 or 6.")
}
print(message_5_or_6)
num_in <- 5
print(message_5_or_6)
message_5_or_6 <- function(num_1) {if (num_in == 5) {
print("You entered 5.")
} else if (num_in == 6) {
print("You entered 6.")
} else {
print("You did not enter 5 or 6.")
}}
message_5_or_6(7)
message_5_or_6 <- function(num_in) {if (num_in == 5) {
print("You entered 5.")
} else if (num_in == 6) {
print("You entered 6.")
} else {
print("You did not enter 5 or 6.")
}}
message_5_or_6(7)
message_5_or_6(5)
message_5_or_6(6)
message_5_or_6(698)
color_number <- function(number_for_color) {if (number_for_color > 0 & number_for_color < 10) {print("blue")}
else if (number_for_color > 10 & number_for_color < 20) {print("red")}
else if (number_for_color > 20 & number_for_color < 30) {print("green")}
else {print("That is not a correct color option.")}}
color_number(27)
# Test2
color_number(7)
color_number(0)
color_number(10)
color_number(13)
color_number(34)
multiples <- function(num_5_limit) {for (i in 0:(num_5_limit/5)) {print(i*5)}}
# Test2
multiples(4)
multiples(25)
num <- 3
step <- 0
while (num > 0.01)
{step <- step+1
num <- num/2}
for (i in 0:end_num) {count_even_numbers <- count_even_numbers + 2}
end_num <- 13
# Initialize count.
count_even_numbers <- 0
# Code goes here:
for (i in 0:end_num) {count_even_numbers <- count_even_numbers + 2}
print(count_even_numbers)
end_num <- 13
# Initialize count.
count_even_numbers <- 0
# Code goes here:
for (i in 0:end_num/2) {count_even_numbers <- count_even_numbers + 2}
print(count_even_numbers)
end_num <- 13
# Initialize count.
count_even_numbers <- 0
# Code goes here:
for (i in 0:(end_num/2)) {count_even_numbers <- count_even_numbers + 2}
print(count_even_numbers)
print(step)
end_num <- 13
# Initialize count.
count_even_numbers <- 0
# Code goes here:
while (count_even_numbers < end_num) {count_even_numbers <- count_even_numbers + 2}
print(count_even_numbers)
num_1 <- 1
num_2 <- 7
num_3 <- 20
num_4 <- 3
num_5 <- 4
num_list <- c(num_1, num_2, num_3, num_4, num_5)
# Code goes here:
my_min <- min(num_list)
my_min
num_list.count
my_avg <- sum(num_list)/
table(num_list)
my_avg <- sum(num_list)/
a <- table(num_list)
a <- table(num_list)
a
my_avg <- sum(num_list)/
length(num_list)
length(num_list)
my_avg <- sum(num_list)/length(num_list)
my_avg
num_1 <- 1
num_2 <- 7
num_3 <- 20
num_4 <- 3
num_5 <- 4
num_list <- c(num_1, num_2, num_3, num_4, num_5)
# Code goes here:
my_min <- min(num_list)
my_min
my_avg <- sum(num_list)/length(num_list)
my_avg
my_max <- max(num_list)
my_max
num_out <- c(min = my_min, avg = my_avg, max = my_max)
num_out
end_num <- 13
# Initialize count.
count_even_numbers <- 0
# Code goes here:
for (count_even_numbers in 0:end_num) {count_even_numbers + 1}
end_num <- 13
# Initialize count.
count_even_numbers <- 0
# Code goes here:
for (i in 0:end_num) {if(end_num %% == 0) {print(end_num/2)}
else {print((end_num - 1)/2)}}
end_num <- 13
# Initialize count.
count_even_numbers <- 0
# Code goes here:
for (i in 0:end_num) {
if(end_num %% 0) print(end_num/2)
else {print((end_num - 1)/2)}}
x <- c(2,5,3,9,8,11,6)
count <- 0
for (val in x) {if(val %% 2 == 0) count = count + 1}
print(count)
for (i in 0:end_num) {if(end_num %% 2 == 0) count_even_numbers = (end_num / 2)
else {count_even_numbers <- (end_num - 1)/2}}
print(count_even_numbers)
end_num <- 26
count_even_numbers <- 0
for (i in 0:end_num) {if(end_num %% 2 == 0) count_even_numbers = (end_num / 2)
else {count_even_numbers <- (end_num - 1)/2}}
print(count_even_numbers)
even_numbers <- function(end_num, count_even_numbers) {
for (i in 0:end_num) {if(end_num %% 2 == 0) count_even_numbers = (end_num / 2)
else {count_even_numbers <- (end_num - 1)/2}}
}
even_numbers(13,0)
even_numbers(13,0)
multiples(25)
even_numbers <- function(end_num, count_even_numbers) {
for (i in 0:end_num) {if(end_num %% 2 == 0) count_even_numbers = (end_num / 2)
else {count_even_numbers <- (end_num - 1)/2}}
print(count_even_numbers)
}
even_numbers(13,0)
even_numbers(1)
even_numbers(0)
even_numbers(24)
end_num <- 13
count_even_numbers <- 0
while (i < end_num) {if(end_num %% 2 == 0) count_even_numbers = (end_num / 2)
else {count_even_numbers <- (end_num - 1)/2}}
print(count_even_numbers)
end_num <- 13
count_even_numbers <- 0
while (i < end_num) {if(i %% 2 == 0) count_even_numbers = count_even_numbers + 1
print(count_even_numbers)}
end_num <- 13
count_even_numbers <- 0
while (i < end_num) {if(i %% 2 == 0) count_even_numbers = count_even_numbers + 1}
print(count_even_numbers)
num <- 3
step <- 0
while (num > 0.01)
{step <- step+1
num <- num/2}
print(step)
end_num <- 13
count_even_numbers <- 0
while (i < end_num) {if(i %% 2 == 0) count_even_numbers = count_even_numbers + 1
else count_even_numbers = count_even_numbers}
print(count_even_numbers)
num_1 <- 1
num_2 <- 7
num_3 <- 20
num_4 <- 3
num_5 <- 4
num_list <- c(num_1, num_2, num_3, num_4, num_5)
# Code goes here:
my_min <- min(num_list)
my_min
my_avg <- sum(num_list)/length(num_list)
my_avg
my_max <- max(num_list)
my_max
num_out <- c(min = my_min, avg = my_avg, max = my_max)
num_out
# Code with fuctions:
my_min <- function(num_list) {min(num_list)}
my_min(num_list)
my_min <- function(num_list) {min(num_list)}
my_min(num_list)
my_max <- function(num_list) {max(num_list)}
my_max(num_list)
my_avg <- function(num_list) {sum(num_list)/length(num_list)}
my_min(num_list)
num_out <- function(num_list) {c(min = my_min(num_list), avg = my_avg(num_list), max = my_max(num_list))}
num_out(num_list)
end_num <- 13
count_even_numbers <- 0
while (i < end_num) {if(i %% 2 == 0) count_even_numbers = count_even_numbers + 1
else count_even_numbers = count_even_numbers}
end_num <- 13
count_even_numbers <- 0
while (count_even_numbers < end_num) {if(count_even_numbers %% 2 == 0) count_even_numbers = count_even_numbers + 1
else count_even_numbers = count_even_numbers}
print(count_even_numbers)
print(count_even_numbers)
count_even_numbers
end_num
while (i < end_num) {if(count_even_numbers %% 2 == 0)} count_even_numbers = count_even_numbers + 1}
while (i < end_num) {if(count_even_numbers %% 2 == 0)} count_even_numbers = count_even_numbers + 1
while (i < end_num) {if(count_even_numbers %% 2 == 0)} count_even_numbers = count_even_numbers + 1
rnorm(2)
install.packages(texreg)
install.packages("texreg")
sampledata = ResumeNames[c(ResumeNames$name=="Tanisha"),]
# Data directory
data_dir <- 'C:/Users/jorda/OneDrive/Documents/UCF/QMB6358/QMB6358F20-JSM/Term Project/Data'
setwd(data_dir)
# Figures directory
fig_dir <- 'C:/Users/jorda/OneDrive/Documents/UCF/QMB6358/QMB6358F20-JSM/Term Project/Figures'
# Tables directory
tab_dir <- 'C:/Users/jorda/OneDrive/Documents/UCF/QMB6358/QMB6358F20-JSM/Term Project/Tables'
# Text directory
text_dir <- 'C:/Users/jorda/OneDrive/Documents/UCF/QMB6358/QMB6358F20-JSM/Term Project/Text'
ResumeNames = read.csv(file = 'ResumeNames.csv')
# Removing data which will not be used in analysis:
# honors,volunteer,military,school,email,special,requirements,reqcomm,reqorg
ResumeNames = ResumeNames[,-c(1,10,11,12,14,15,17,22,24,27)]
ResumeNames$call = ResumeNames$call %>% recode('yes'=1, 'no'=0)
rm(list = ls(all=TRUE))
install.packages("xtable")
library(xtable)
install.packages("texreg")
library(texreg)
##################################################
# Loading data and transforming it to work with
# statistical functions in R
##################################################
# Data directory
data_dir <- 'C:/Users/jorda/OneDrive/Documents/UCF/QMB6358/QMB6358F20-JSM/Term Project/Data'
setwd(data_dir)
getwd()
# Figures directory
fig_dir <- 'C:/Users/jorda/OneDrive/Documents/UCF/QMB6358/QMB6358F20-JSM/Term Project/Figures'
# Tables directory
tab_dir <- 'C:/Users/jorda/OneDrive/Documents/UCF/QMB6358/QMB6358F20-JSM/Term Project/Tables'
# Text directory
text_dir <- 'C:/Users/jorda/OneDrive/Documents/UCF/QMB6358/QMB6358F20-JSM/Term Project/Text'
ResumeNames = read.csv(file = 'ResumeNames.csv')
# Removing data which will not be used in analysis:
# honors,volunteer,military,school,email,special,requirements,reqcomm,reqorg
ResumeNames = ResumeNames[,-c(1,10,11,12,14,15,17,22,24,27)]
# Changing "no" to "0" and "yes" to "1" in "call" column to use in histogram
install.packages("dplyr")
library(dplyr)
ResumeNames$call = ResumeNames$call %>% recode('yes'=1, 'no'=0)
# Call is going to be the dependent variable in this analysis.
# Since the Call data is binary (yes/no >>> 1/0),
# I'm going to use a logistic regression model as instructed.
##################################################
# Summary statistics for dependent variable.
##################################################
# Histogram of Calls for all resume names
hist(ResumeNames$call,col = c("green","red"),xlab = "Calls",ylim = c(0,5000),main = "Histogram of Calls")
# Saving histogram in Figures folder
fig_file_name = 'Histogram - Calls for All Names.eps'
out_file_name = sprintf('%s/%s', fig_dir, fig_file_name)
setEPS()
postscript(out_file_name)
hist(ResumeNames$call,col = c("green","red"),xlab = "Calls",ylim = c(0,5000),main = "Histogram of Calls")
dev.off()
# Histogram of Calls for Caucasian names
cauc_names = ResumeNames[c(ResumeNames$ethnicity=="cauc"),]
hist(cauc_names$call,col = c("green","red"),xlab = "Calls",ylim = c(0,5000),main = "Histogram of Calls for Caucasian Names")
# Saving histogram in Figures folder
fig_file_name = 'Histogram - Calls for Caucasian Names.eps'
out_file_name = sprintf('%s/%s', fig_dir, fig_file_name)
setEPS()
postscript(out_file_name)
hist(cauc_names$call,col = c("green","red"),xlab = "Calls",ylim = c(0,5000),main = "Histogram of Calls for Caucasian Names")
dev.off()
# Histogram of Calls for African American names
afam_names = ResumeNames[c(ResumeNames$ethnicity=="afam"),]
hist(afam_names$call,col = c("green","red"),xlab = "Calls",ylim = c(0,5000),main = "Histogram of Calls for African American Names")
# Saving histogram in Figures folder
fig_file_name = 'Histogram - Calls for African American Names.eps'
out_file_name = sprintf('%s/%s', fig_dir, fig_file_name)
setEPS()
postscript(out_file_name)
hist(afam_names$call,col = c("green","red"),xlab = "Calls",ylim = c(0,5000),main = "Histogram of Calls for African American Names")
dev.off()
##################################################
# Summary of the explanatory variables
##################################################
str(ResumeNames[,-c(5)])
summary(ResumeNames[,c(1,2,3,4,6,7)])
summary(ResumeNames[,c(8,9,10,11,13,12)])
summary(ResumeNames[,c(14,15,16,17,18)])
install.packages("wesanderson")
library(wesanderson)
# Histogram of 'Caucasian' Names
barplot(table(cauc_names$name),col = wes_palette("IsleofDogs2",type = "continuous") ,main = "Histogram of Caucasian Names",horiz = T,las=1)
# Saving in Figures folder
fig_file_name = 'Histogram - Names, Caucasian.eps'
out_file_name = sprintf('%s/%s', fig_dir, fig_file_name)
setEPS()
postscript(out_file_name)
barplot(table(cauc_names$name),col = wes_palette("IsleofDogs2",type = "continuous") ,main = "Histogram of Caucasian Names",horiz = T,las=1)
dev.off()
# Histogram of 'African American' Names
barplot(table(afam_names$name),col = wes_palette("IsleofDogs2",type = "continuous") ,main = "Histogram of African American Names",horiz = T,las=1)
# Saving in Figures folder
fig_file_name = 'Histogram - Names, African American.eps'
out_file_name = sprintf('%s/%s', fig_dir, fig_file_name)
setEPS()
postscript(out_file_name)
barplot(table(afam_names$name),col = wes_palette("IsleofDogs2",type = "continuous") ,main = "Histogram of African American Names",horiz = T,las=1)
dev.off()
# Histogram of 'Male' Names
male_names = ResumeNames[c(ResumeNames$gender=="male"),]
barplot(table(male_names$name),col = wes_palette("Darjeeling1",type = "continuous") ,main = "Histogram of Male Names",horiz = T,las=1)
# Saving in Figures folder
fig_file_name = 'Histogram - Names, Male.eps'
out_file_name = sprintf('%s/%s', fig_dir, fig_file_name)
setEPS()
postscript(out_file_name)
barplot(table(male_names$name),col = wes_palette("Darjeeling1",type = "continuous") ,main = "Histogram of Male Names",horiz = T,las=1)
dev.off()
# Histogram of 'Female' Names
female_names = ResumeNames[c(ResumeNames$gender=="female"),]
barplot(table(female_names$name),col = wes_palette("GrandBudapest2",type = "continuous") ,main = "Histogram of Female Names",horiz = T,las=1)
# Saving in Figures folder
fig_file_name = 'Histogram - Names, Female.eps'
out_file_name = sprintf('%s/%s', fig_dir, fig_file_name)
setEPS()
postscript(out_file_name)
barplot(table(female_names$name),col = wes_palette("GrandBudapest2",type = "continuous") ,main = "Histogram of Female Names",horiz = T,las=1)
dev.off()
# Looking at a sample of resumes with a single person's name, one can see that
# no two resumes contain the same criteria. All 4870 resumes are completely randomized.
sampledata = ResumeNames[c(ResumeNames$name=="Tanisha"),]
str(ResumeNames[,-c(5)])
summary(ResumeNames[,c(1,2,3,4,6,7)])
# Output as Tex table file
out_xtable <- xtable(summary(ResumeNames[,c(1,2,3,4,6,7)]),
digits = 2, label = 'tab:summary1',
caption = 'Summary of Variables - 1')
tab_file_name <- sprintf('%s/summary1.tex', tab_dir)
cat(print(out_xtable), file = tab_file_name, append = FALSE)
summary(ResumeNames[,c(8,9,10,11,13,12)])
# Output as Tex table file
out_xtable <- xtable(summary(ResumeNames[,c(1,2,3,4,6,7)]),
digits = 2, label = 'tab:summary2',
caption = 'Summary of Variables - 2')
tab_file_name <- sprintf('%s/summary2.tex', tab_dir)
cat(print(out_xtable), file = tab_file_name, append = FALSE)
summary(ResumeNames[,c(14,15,16,17,18)])
# Output as Tex table file
out_xtable <- xtable(summary(ResumeNames[,c(1,2,3,4,6,7)]),
digits = 2, label = 'tab:summary3',
caption = 'Summary of Variables - 3')
tab_file_name <- sprintf('%s/summary3.tex', tab_dir)
cat(print(out_xtable), file = tab_file_name, append = FALSE)
summary(ResumeNames[,c(8,9,10,11,13,12)])
# Output as Tex table file
out_xtable <- xtable(summary(ResumeNames[,c(8,9,10,11,13,12)]),
digits = 2, label = 'tab:summary2',
caption = 'Summary of Variables - 2')
tab_file_name <- sprintf('%s/summary2.tex', tab_dir)
cat(print(out_xtable), file = tab_file_name, append = FALSE)
summary(ResumeNames[,c(14,15,16,17,18)])
# Output as Tex table file
out_xtable <- xtable(summary(ResumeNames[,c(14,15,16,17,18)]),
digits = 2, label = 'tab:summary3',
caption = 'Summary of Variables - 3')
tab_file_name <- sprintf('%s/summary3.tex', tab_dir)
cat(print(out_xtable), file = tab_file_name, append = FALSE)
sampledata = ResumeNames[c(ResumeNames$name=="Tanisha"),]
# Output as Tex table file
out_xtable <- xtable(ResumeNames[c(ResumeNames$name=="Tanisha"),],
digits = 2, label = 'tab:SampleData',
caption = 'Resumes under one name are randomized')
tab_file_name <- sprintf('%s/SampleData.tex', tab_dir)
cat(print(out_xtable), file = tab_file_name, append = FALSE)
log_model <- glm(data = ResumeNames,
formula = name ~ gender + ethnicity + quality + city +
jobs + experience + holes + computer + college + minimum +
equal + wanted + reqexp + reqeduc + reqcomp + industry,
family = 'binomial')
# Output the results to screen.
summary(log_model)
# Output as Tex table file
out_xtable <- xtable(summary(log_model),
digits = 2, label = 'tab:Model_Summary',
caption = 'Logistic Regression Model Summary')
tab_file_name <- sprintf('%s/Model_Summary.tex', tab_dir)
cat(print(out_xtable), file = tab_file_name, append = FALSE)
# Creating script of analysis and comments on the model results
text_file_name <- 'Regression_Analysis.tex'
out_file_name <- sprintf('%s/%s', text_dir, text_file_name)
# Start a new file with append = FALSE.
cat('\n%% Logistic Regression Model Analysis:\n\n',
file = out_file_name, append = FALSE)
# Append new lines of text with append = TRUE.
cat('\n\nBased on the p values of the model, ethnicity or gender had no significance in determining \n',
file = out_file_name, append = TRUE)
cat('(the likelihood of receiving a call back from the employers. The most significant independent \n',
file = out_file_name, append = TRUE)
cat('(variables were the city (primarily if the city was Chicago), the years of experience listed on \n',
file = out_file_name, append = TRUE)
cat('(resume, and if the employer wanted to fill an office support position.\n',
file = out_file_name, append = TRUE)
# Creating script of analysis and comments on the model results
text_file_name <- 'Explanation_of_Variables.tex'
out_file_name <- sprintf('%s/%s', text_dir, text_file_name)
# Start a new file with append = FALSE.
cat('\n%% Explanations and Definitions of Variables:\n\n',
file = out_file_name, append = FALSE)
# Append new lines of text with append = TRUE.
cat('\n\nName, gender, ethnicity, city, and industry are self-explanatory so I will not list those definitions.\n',
file = out_file_name, append = TRUE)
cat('(quality = quality of resume \n',
file = out_file_name, append = TRUE)
cat('(jobs = number of jobs listed on resume), the years of experience listed on \n',
file = out_file_name, append = TRUE)
cat('(experience = number of years of work experience\n',
file = out_file_name, append = TRUE)
cat('(holes = does resume have some employment holes?\n',
file = out_file_name, append = TRUE)
cat('(computer = does resume mention some computer skills?\n',
file = out_file_name, append = TRUE)
cat('(college = does applicant have a college degree or more?\n',
file = out_file_name, append = TRUE)
cat('(minimum = minimum experience requirement of employer\n',
file = out_file_name, append = TRUE)
cat('(equal = is the employer EOE (Equal Opportunity Employment)?\n',
file = out_file_name, append = TRUE)
cat('(wanted = type of position desired by employer\n',
file = out_file_name, append = TRUE)
cat('(reqexp = does ad mention some experience requirement?\n',
file = out_file_name, append = TRUE)
cat('(reqeduc = does ad mention some educational requirement?\n',
file = out_file_name, append = TRUE)
cat('(reqcomp = does ad mention some computer skills requirement?\n',
file = out_file_name, append = TRUE)
