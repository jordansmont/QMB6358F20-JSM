load(ggplot2)
install.packages(c("ggplot2", "car", "QuantPsyc", "lmtest", "sandwich"))
add[1,2]
add[1,2]
1 DEB 3
print(test.tolower())
test <- "String"
print(test.tolower())
print(test.tolower())
if (time == "8:00" & day != "Sunday") {
print("Wake up!")
}
if (weather == "rainy") {
print("Bring an unbrella.")
} else if (weather == "sunny") {
print("Bring a hat.")
} else {
print("Bring both, just in case.")
}
weather = "stormy"
if (weather == "rainy") {
print("Bring an unbrella.")
} else if (weather == "sunny") {
print("Bring a hat.")
} else {
print("Bring both, just in case.")
}
num_1 <- 3
num_2 <- 6
# Code goes here:
product_out <- num_1 * num_2
print(product_out)
num_in <- 7
# Code goes here:
message_5_or_6 <- if (num_in == 5) {
print("You entered 5.")
} else if (num_in == 6) {
print("You entered 6.")
} else {
print("You did not enter 5 or 6.")
}
print(message_5_or_6)
number_for_color <- 27
# Code goes here:
color_number <- if (number_for_color > 0 & number_for_color < 10) {
print("blue")
} else if (number_for_color > 10 & number_for_color < 20) {
print("red")
} else if (number_for_color > 20 & number_for_color < 30)
print("green")
} else {
print("That is not a correct color option.")
}
print(color_number)
number_for_color <- 27
# Code goes here:
color_number <- if (number_for_color > 0 & number_for_color < 10) {
print("blue")
} else if (number_for_color > 10 & number_for_color < 20) {
print("red")
} else if (number_for_color > 20 & number_for_color < 30) {
print("green")
} else {
print("That is not a correct color option.")
}
print(color_number)
#Test1
num_1 <- 1
num_2 <- 7
product_out
product_out <- num_1 * num_2
num_1 <- 1
num_2 <- 7
product_out
num_1 <- 9
num_2 <- 15
product_out
print(product_out)
num_in <- 5
print(message_5_or_6)
for (i in 1:10) {print i^2}
for (i in 1:10) {print(i^2)}
for (day_prefix in c("Mon", "Tues", "Wednes", "Thurs", "Fri")){
print(sprintf("%day", day_prefix))
}
for (day_prefix in c("Mon", "Tues", "Wednes", "Thurs", "Fri")){
print(sprintf("%sday", day_prefix))
}
for (i in 1:num_5_limit) {print(i*5)}
num_5_limit <- 23
# Code goes here:
for (i in 1:num_5_limit) {print(i*5)}
for (i in 1:(num_5_limit/5)) {print(i*5)}
num_5_limit <- 76
for (i in 1:(num_5_limit/5)) {print(i*5)}
# Test2
num_5_limit <- 4
for (i in 1:(num_5_limit/5)) {print(i*5)}
num_5_limit <- 4
for (i in 0:(num_5_limit/5)) {print(i*5)}
product_out <- function(num_1,num_2) {return(num_1 * num_2)}
product_out
product_out(9,15)
print(product_out)
# Test1
num_1 <- 1
num_2 <- 7
num_1 <- 3
num_2 <- 6
# Code goes here:
product_out <- num_1 * num_2
print(product_out)
product_out <- function(num_1,num_2) {return(num_1 * num_2)}
product_out(3,6)
num_1 <- 1
num_2 <- 7
product_out <- num_1 * num_2
print(product_out)
product_out <- function(num_1,num_2) {return(num_1 * num_2)}
product_out(1,7)
num_in <- 7
# Code goes here:
message_5_or_6 <- if (num_in == 5) {
print("You entered 5.")
} else if (num_in == 6) {
print("You entered 6.")
} else {
print("You did not enter 5 or 6.")
}
print(message_5_or_6)
num_in <- 5
print(message_5_or_6)
message_5_or_6 <- function(num_1) {if (num_in == 5) {
print("You entered 5.")
} else if (num_in == 6) {
print("You entered 6.")
} else {
print("You did not enter 5 or 6.")
}}
message_5_or_6(7)
message_5_or_6 <- function(num_in) {if (num_in == 5) {
print("You entered 5.")
} else if (num_in == 6) {
print("You entered 6.")
} else {
print("You did not enter 5 or 6.")
}}
message_5_or_6(7)
message_5_or_6(5)
message_5_or_6(6)
message_5_or_6(698)
color_number <- function(number_for_color) {if (number_for_color > 0 & number_for_color < 10) {print("blue")}
else if (number_for_color > 10 & number_for_color < 20) {print("red")}
else if (number_for_color > 20 & number_for_color < 30) {print("green")}
else {print("That is not a correct color option.")}}
color_number(27)
# Test2
color_number(7)
color_number(0)
color_number(10)
color_number(13)
color_number(34)
multiples <- function(num_5_limit) {for (i in 0:(num_5_limit/5)) {print(i*5)}}
# Test2
multiples(4)
multiples(25)
num <- 3
step <- 0
while (num > 0.01)
{step <- step+1
num <- num/2}
for (i in 0:end_num) {count_even_numbers <- count_even_numbers + 2}
end_num <- 13
# Initialize count.
count_even_numbers <- 0
# Code goes here:
for (i in 0:end_num) {count_even_numbers <- count_even_numbers + 2}
print(count_even_numbers)
end_num <- 13
# Initialize count.
count_even_numbers <- 0
# Code goes here:
for (i in 0:end_num/2) {count_even_numbers <- count_even_numbers + 2}
print(count_even_numbers)
end_num <- 13
# Initialize count.
count_even_numbers <- 0
# Code goes here:
for (i in 0:(end_num/2)) {count_even_numbers <- count_even_numbers + 2}
print(count_even_numbers)
print(step)
end_num <- 13
# Initialize count.
count_even_numbers <- 0
# Code goes here:
while (count_even_numbers < end_num) {count_even_numbers <- count_even_numbers + 2}
print(count_even_numbers)
num_1 <- 1
num_2 <- 7
num_3 <- 20
num_4 <- 3
num_5 <- 4
num_list <- c(num_1, num_2, num_3, num_4, num_5)
# Code goes here:
my_min <- min(num_list)
my_min
num_list.count
my_avg <- sum(num_list)/
table(num_list)
my_avg <- sum(num_list)/
a <- table(num_list)
a <- table(num_list)
a
my_avg <- sum(num_list)/
length(num_list)
length(num_list)
my_avg <- sum(num_list)/length(num_list)
my_avg
num_1 <- 1
num_2 <- 7
num_3 <- 20
num_4 <- 3
num_5 <- 4
num_list <- c(num_1, num_2, num_3, num_4, num_5)
# Code goes here:
my_min <- min(num_list)
my_min
my_avg <- sum(num_list)/length(num_list)
my_avg
my_max <- max(num_list)
my_max
num_out <- c(min = my_min, avg = my_avg, max = my_max)
num_out
end_num <- 13
# Initialize count.
count_even_numbers <- 0
# Code goes here:
for (count_even_numbers in 0:end_num) {count_even_numbers + 1}
end_num <- 13
# Initialize count.
count_even_numbers <- 0
# Code goes here:
for (i in 0:end_num) {if(end_num %% == 0) {print(end_num/2)}
else {print((end_num - 1)/2)}}
end_num <- 13
# Initialize count.
count_even_numbers <- 0
# Code goes here:
for (i in 0:end_num) {
if(end_num %% 0) print(end_num/2)
else {print((end_num - 1)/2)}}
x <- c(2,5,3,9,8,11,6)
count <- 0
for (val in x) {if(val %% 2 == 0) count = count + 1}
print(count)
for (i in 0:end_num) {if(end_num %% 2 == 0) count_even_numbers = (end_num / 2)
else {count_even_numbers <- (end_num - 1)/2}}
print(count_even_numbers)
end_num <- 26
count_even_numbers <- 0
for (i in 0:end_num) {if(end_num %% 2 == 0) count_even_numbers = (end_num / 2)
else {count_even_numbers <- (end_num - 1)/2}}
print(count_even_numbers)
even_numbers <- function(end_num, count_even_numbers) {
for (i in 0:end_num) {if(end_num %% 2 == 0) count_even_numbers = (end_num / 2)
else {count_even_numbers <- (end_num - 1)/2}}
}
even_numbers(13,0)
even_numbers(13,0)
multiples(25)
even_numbers <- function(end_num, count_even_numbers) {
for (i in 0:end_num) {if(end_num %% 2 == 0) count_even_numbers = (end_num / 2)
else {count_even_numbers <- (end_num - 1)/2}}
print(count_even_numbers)
}
even_numbers(13,0)
even_numbers(1)
even_numbers(0)
even_numbers(24)
end_num <- 13
count_even_numbers <- 0
while (i < end_num) {if(end_num %% 2 == 0) count_even_numbers = (end_num / 2)
else {count_even_numbers <- (end_num - 1)/2}}
print(count_even_numbers)
end_num <- 13
count_even_numbers <- 0
while (i < end_num) {if(i %% 2 == 0) count_even_numbers = count_even_numbers + 1
print(count_even_numbers)}
end_num <- 13
count_even_numbers <- 0
while (i < end_num) {if(i %% 2 == 0) count_even_numbers = count_even_numbers + 1}
print(count_even_numbers)
num <- 3
step <- 0
while (num > 0.01)
{step <- step+1
num <- num/2}
print(step)
end_num <- 13
count_even_numbers <- 0
while (i < end_num) {if(i %% 2 == 0) count_even_numbers = count_even_numbers + 1
else count_even_numbers = count_even_numbers}
print(count_even_numbers)
num_1 <- 1
num_2 <- 7
num_3 <- 20
num_4 <- 3
num_5 <- 4
num_list <- c(num_1, num_2, num_3, num_4, num_5)
# Code goes here:
my_min <- min(num_list)
my_min
my_avg <- sum(num_list)/length(num_list)
my_avg
my_max <- max(num_list)
my_max
num_out <- c(min = my_min, avg = my_avg, max = my_max)
num_out
# Code with fuctions:
my_min <- function(num_list) {min(num_list)}
my_min(num_list)
my_min <- function(num_list) {min(num_list)}
my_min(num_list)
my_max <- function(num_list) {max(num_list)}
my_max(num_list)
my_avg <- function(num_list) {sum(num_list)/length(num_list)}
my_min(num_list)
num_out <- function(num_list) {c(min = my_min(num_list), avg = my_avg(num_list), max = my_max(num_list))}
num_out(num_list)
end_num <- 13
count_even_numbers <- 0
while (i < end_num) {if(i %% 2 == 0) count_even_numbers = count_even_numbers + 1
else count_even_numbers = count_even_numbers}
end_num <- 13
count_even_numbers <- 0
while (count_even_numbers < end_num) {if(count_even_numbers %% 2 == 0) count_even_numbers = count_even_numbers + 1
else count_even_numbers = count_even_numbers}
print(count_even_numbers)
print(count_even_numbers)
count_even_numbers
end_num
while (i < end_num) {if(count_even_numbers %% 2 == 0)} count_even_numbers = count_even_numbers + 1}
while (i < end_num) {if(count_even_numbers %% 2 == 0)} count_even_numbers = count_even_numbers + 1
while (i < end_num) {if(count_even_numbers %% 2 == 0)} count_even_numbers = count_even_numbers + 1
rnorm(2)
install.packages(texreg)
install.packages("texreg")
wd_path <- "C:/Users/jorda/OneDrive/Documents/UCF/QMB6358/QMB6358F20-JSM/assignment_09"
setwd(wd_path)
airplane_sales <- read.csv(file = 'airplane_sales.csv')
summary(airplane_sales)
print(summary(lm_airplanes))
lm_airplanes = lm(price ~ age, data = airplane_sales)
print(summary(lm_airplanes))
airplane_specs <- read.csv(file = 'airplane_specs.csv')
View(airplane_sales)
View(airplane_specs)
order(airplane_specs$X0Sale_ID)
sort(airplane_specs$X0Sale_ID)
airplane_specs <- airplane_specs[order(X0Sale_ID),]
airplane_specs <- airplane_specs[order(X0Sale ID),]
airplane_specs <- airplane_specs[,order(X0Sale_ID)]
airplane_specs <- airplane_specs[,order(XOSale_ID)]
airplane_specs <- airplane_specs[order(airplane_specs$XOSale_ID),]
airplane_specs <- airplane_specs[sort(airplane_specs$XOSale_ID),]
airplane_specs <- read.csv(file = 'airplane_specs.csv')
sort(airplane_specs$XOSale_ID)
airplane_specs <- airplane_specs[,sort(airplane_specs$XOSale_ID)]
airplane_specs <- read.csv(file = 'airplane_specs.csv')
sort(airplane_specs$XOSale_ID)
airplane_specs <- airplane_specs[order(airplane_specs$XOSale_ID),]
order(airplane_specs$XOSale_ID)
order(airplane_specs$XOSale_ID)
airplane_specs$XOSale_ID
class(airplane_specs$X0Sale_ID)
typeof(airplane_specs$X0Sale_ID)
airplane_specs <- airplane_specs[order(airplane_specs[[XOSale_ID]],]
)
airplane_specs <- airplane_specs[order(airplane_specs[[XOSale_ID]]),]
airplane_specs <- airplane_specs[order(airplane_specs[XOSale_ID]),]
order(airplane_specs[XOSale_ID])
airplane_specs[age]
airplane_specs = as.matrix(airplane_specs)
airplane_specs <- airplane_specs[order(airplane_specs[XOSale_ID]),]
airplane_specs <- airplane_specs[order(airplane_specs$XOSale_ID),]
airplane_specs <- airplane_specs[order(XOSale_ID),]
airplane_specs = as.data.frame(airplane_specs)
airplane_specs <- airplane_specs[order(airplane_specs$XOSale_ID),]
airplane_specs = as.data.frame(airplane_specs)
airplane_specs <- airplane_specs[order(airplane_specs$XOSale_ID),]
airplane_specs$XOSale_ID
sort(airplane_specs$XOSale_ID)
airplane_specs <- read.csv(file = 'airplane_specs.csv')
sort(airplane_specs$XOSale_ID)
